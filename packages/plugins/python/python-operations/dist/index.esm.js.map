{"version":3,"file":"index.esm.js","sources":["../../../dist/plugins/python/common/declaration-block.js","../../../dist/plugins/python/common/scalars.js","../../../dist/plugins/python/common/utils.js","../../../dist/plugins/python/common/python-field-types.js","../../../dist/plugins/python/python-operations/src/visitor.js","../../../dist/plugins/python/python-operations/src/index.js"],"sourcesContent":["import { DeclarationBlock, indent, isStringValueNode, } from '@graphql-codegen/visitor-plugin-common';\nexport function transformPythonComment(comment, indentLevel = 0) {\n    if (!comment || comment === '') {\n        return '';\n    }\n    if (isStringValueNode(comment)) {\n        comment = comment.value;\n    }\n    comment = comment.split('*/').join('*\\\\/');\n    let lines = comment.split('\\n');\n    if (lines.length === 1) {\n        return indent(`# ${lines[0]}\\n`, indentLevel);\n    }\n    lines = [`\"\"\"`, ...lines, `\"\"\"\\n`];\n    return lines.map(line => indent(line, indentLevel)).join('\\n');\n}\nexport class PythonDeclarationBlock extends DeclarationBlock {\n    constructor(_config) {\n        super({\n            enumNameValueSeparator: '=',\n            ..._config,\n        });\n    }\n    withComment(comment) {\n        const nonEmptyComment = isStringValueNode(comment) ? !!comment.value : !!comment;\n        if (nonEmptyComment) {\n            this._comment = transformPythonComment(comment, 0);\n        }\n        return this;\n    }\n    get string() {\n        let result = '';\n        if (this._decorator) {\n            result += this._decorator + '\\n';\n        }\n        if (this._kind && this._kind !== 'union') {\n            result += 'class ';\n        }\n        const name = this._name + (this._nameGenerics || '');\n        if (name) {\n            result += name;\n        }\n        switch (this._kind) {\n            case 'enum':\n                result += '(Enum)';\n                break;\n            case 'union':\n                result += ' = Union[';\n                break;\n            default:\n                break;\n        }\n        if (this._block) {\n            if (this._content) {\n                result += this._content;\n            }\n            const blockWrapper = this._ignoreBlockWrapper ? '' : this._config.blockWrapper;\n            const before = ':' + blockWrapper;\n            let after = blockWrapper;\n            if (this._kind !== 'scalar') {\n                after += `\\n__GQL_CODEGEN_${name}__ = ${name}`;\n            }\n            const block = [before, this._block, after].filter(val => !!val).join('\\n');\n            if (this._methodName) {\n                result += `${this._methodName}(${this._config.blockTransformer(block)})`;\n            }\n            else {\n                result += this._config.blockTransformer(block);\n            }\n        }\n        else if (this._content) {\n            result += this._content;\n            if (this._kind && this._kind === 'union') {\n                result += ']';\n            }\n            result += `\\n__GQL_CODEGEN_${name}__ = ${name}`;\n        }\n        return (this._comment ? this._comment : '') + result + '\\n';\n    }\n}\n//# sourceMappingURL=declaration-block.js.map","export const PYTHON_SCALARS = {\n    ID: 'str',\n    String: 'str',\n    Boolean: 'bool',\n    Int: 'int',\n    Float: 'float',\n};\nexport const pythonNativeValueTypes = [\n    'bool',\n    'byte',\n    'sbyte',\n    'char',\n    'decimal',\n    'double',\n    'float',\n    'int',\n    'uint',\n    'long',\n    'ulong',\n    'short',\n    'ushort',\n];\n//# sourceMappingURL=scalars.js.map","import { Kind } from 'graphql';\nimport { indent } from '@graphql-codegen/visitor-plugin-common';\nimport { pythonNativeValueTypes } from './scalars';\nexport function buildPackageNameFromPath(path) {\n    const unixify = require('unixify');\n    return unixify(path || '')\n        .replace(/src\\/main\\/.*?\\//, '')\n        .replace(/\\//g, '.');\n}\nexport function transformComment(comment, indentLevel = 0) {\n    if (!comment) {\n        return '';\n    }\n    if (isStringValueNode(comment)) {\n        comment = comment.value;\n    }\n    comment = comment.trimStart().split('*/').join('*\\\\/');\n    let lines = comment.split('\\n');\n    lines = ['/// <summary>', ...lines.map(line => `/// ${line}`), '/// </summary>'];\n    return lines\n        .map(line => indent(line, indentLevel))\n        .concat('')\n        .join('\\n');\n}\nfunction isStringValueNode(node) {\n    return node && typeof node === 'object' && node.kind === Kind.STRING;\n}\nexport function isValueType(type) {\n    // Limitation: only checks the list of known built in value types\n    // Eg .NET types and struct types won't be detected correctly\n    return pythonNativeValueTypes.includes(type);\n}\nexport function getListTypeField(typeNode) {\n    if (typeNode.kind === Kind.LIST_TYPE) {\n        return {\n            required: false,\n            type: getListTypeField(typeNode.type),\n        };\n    }\n    else if (typeNode.kind === Kind.NON_NULL_TYPE && typeNode.type.kind === Kind.LIST_TYPE) {\n        return Object.assign(getListTypeField(typeNode.type), {\n            required: true,\n        });\n    }\n    else if (typeNode.kind === Kind.NON_NULL_TYPE) {\n        return getListTypeField(typeNode.type);\n    }\n    else {\n        return undefined;\n    }\n}\nexport function getListTypeDepth(listType) {\n    if (listType) {\n        return getListTypeDepth(listType.type) + 1;\n    }\n    else {\n        return 0;\n    }\n}\nexport function getListInnerTypeNode(typeNode) {\n    if (typeNode.kind === Kind.LIST_TYPE) {\n        return getListInnerTypeNode(typeNode.type);\n    }\n    else if (typeNode.kind === Kind.NON_NULL_TYPE && typeNode.type.kind === Kind.LIST_TYPE) {\n        return getListInnerTypeNode(typeNode.type);\n    }\n    else {\n        return typeNode;\n    }\n}\nexport function wrapFieldType(fieldType, listTypeField, listType = 'IEnumerable') {\n    if (listTypeField) {\n        const innerType = wrapFieldType(fieldType, listTypeField.type, listType);\n        return `${listType}[${innerType}]`;\n    }\n    else {\n        return fieldType.innerTypeName;\n    }\n}\n//# sourceMappingURL=utils.js.map","export class PythonFieldType {\n    constructor(fieldType) {\n        Object.assign(this, fieldType);\n    }\n    get innerTypeName() {\n        const nullable = this.baseType.valueType && !this.baseType.required;\n        return `${nullable ? 'Optional[' : ''}${this.baseType.type}${nullable ? ']' : ''}`;\n    }\n    get isOuterTypeRequired() {\n        return this.listType ? this.listType.required : this.baseType.required;\n    }\n}\n//# sourceMappingURL=python-field-types.js.map","import { ClientSideBaseVisitor, DocumentMode, indentMultiline, getBaseTypeNode, buildScalars, } from '@graphql-codegen/visitor-plugin-common';\nimport autoBind from 'auto-bind';\nimport { print, Kind, isScalarType, parse, printSchema, isEnumType, isInputObjectType, } from 'graphql';\nimport { PythonDeclarationBlock } from '../../common/declaration-block';\nimport { getListInnerTypeNode, PYTHON_SCALARS, getListTypeField, getListTypeDepth, isValueType, PythonFieldType, wrapFieldType, } from '../../common/common';\nconst defaultSuffix = 'GQL';\nexport class PythonOperationsVisitor extends ClientSideBaseVisitor {\n    constructor(schema, fragments, rawConfig, documents) {\n        super(schema, fragments, rawConfig, {\n            schema: rawConfig.schema,\n            subscriptionsSchema: rawConfig.schemaSubscriptions,\n            querySuffix: rawConfig.querySuffix || defaultSuffix,\n            mutationSuffix: rawConfig.mutationSuffix || defaultSuffix,\n            subscriptionSuffix: rawConfig.subscriptionSuffix || defaultSuffix,\n            scalars: buildScalars(schema, rawConfig.scalars, PYTHON_SCALARS),\n        }, documents);\n        this._operationsToInclude = [];\n        this.overruleConfigSettings();\n        autoBind(this);\n        this._schemaAST = parse(printSchema(schema));\n        this._usingNearFileOperations = true;\n    }\n    // Some settings aren't supported with C#, overruled here\n    overruleConfigSettings() {\n        if (this.config.documentMode === DocumentMode.graphQLTag) {\n            // C# operations does not (yet) support graphQLTag mode\n            this.config.documentMode = DocumentMode.documentNode;\n        }\n    }\n    _gql(node) {\n        const fragments = this._transformFragments(node);\n        const doc = this._prepareDocument([print(node), this._includeFragments(fragments)].join('\\n'));\n        return doc.replace(/\"/g, '\\\\\"');\n    }\n    _nonScalarPrefix() {\n        return this._usingNearFileOperations ? 'Types.' : '';\n    }\n    _gqlInputSignature(variable) {\n        const typeNode = variable.type;\n        const innerType = getBaseTypeNode(typeNode);\n        const schemaType = this._schema.getType(innerType.name.value);\n        const name = variable.variable.name.value;\n        const isInputAScalar = isScalarType(schemaType);\n        const baseType = !isInputAScalar\n            ? `${this._nonScalarPrefix()}${innerType.name.value}`\n            : this.scalars[schemaType.name] || 'object';\n        const listType = getListTypeField(typeNode);\n        const required = getListInnerTypeNode(typeNode).kind === Kind.NON_NULL_TYPE;\n        return {\n            name: name,\n            signature: !listType\n                ? `${name}: ${baseType}${!required ? ' = None' : ''}`\n                : `${name}: ${'List['.repeat(getListTypeDepth(listType))}${baseType}${']'.repeat(getListTypeDepth(listType))}`,\n            value: isInputAScalar ? name : `asdict(${name})`,\n        };\n    }\n    _operationSuffix(operationType) {\n        switch (operationType) {\n            case 'query':\n                return this.config.querySuffix;\n            case 'mutation':\n                return this.config.mutationSuffix;\n            case 'subscription':\n                return this.config.subscriptionSuffix;\n            default:\n                return defaultSuffix;\n        }\n    }\n    getExecuteFunction(isAsync, node) {\n        var _a;\n        if (!node.name || !node.name.value) {\n            return null;\n        }\n        this._collectedOperations.push(node);\n        const documentVariableName = this.convertName(node, {\n            suffix: this.config.documentVariableSuffix,\n            prefix: this.config.documentVariablePrefix,\n            useTypesPrefix: false,\n        });\n        const operationType = node.operation;\n        const operationTypeSuffix = this.config.dedupeOperationSuffix && node.name.value.toLowerCase().endsWith(node.operation)\n            ? ''\n            : !operationType\n                ? ''\n                : operationType;\n        const operationResultType = this.convertName(node, {\n            suffix: operationTypeSuffix + this._parsedConfig.operationResultSuffix,\n        });\n        const operationVariablesTypes = this.convertName(node, {\n            suffix: operationTypeSuffix + 'Variables',\n        });\n        this._operationsToInclude.push({\n            node,\n            documentVariableName,\n            operationType,\n            operationResultType,\n            operationVariablesTypes,\n        });\n        const inputs = (_a = node.variableDefinitions) === null || _a === void 0 ? void 0 : _a.map(v => this._gqlInputSignature(v));\n        const hasInputArgs = !!(inputs === null || inputs === void 0 ? void 0 : inputs.length);\n        const inputSignatures = hasInputArgs ? inputs.map(sig => sig.signature).join(', ') : '';\n        const variables = `{\n    ${inputs.map(v => `\"${v.name}\": ${v.value},`).join('\\n      ')}\n  }`;\n        const resposeClass = `${this.convertName(node.name.value).replace(/_/g, '')}Response`;\n        const content = `\n${isAsync ? 'async ' : ''}def execute${isAsync ? '_async' : ''}_${this._get_node_name(node)}(${inputSignatures}) -> ${resposeClass}:\n  client = _get_client_${isAsync ? 'async' : 'sync'}()\n  variables=${variables}\n  variables_no_none = {k:v for k,v in variables.items() if v is not None}\n${isAsync\n            ? `\n  response_text_promise = client.execute_async(\n    _gql_${this._get_node_name(node)},\n    variable_values=variables_no_none,\n  )\n  response_dict = await response_text_promise`\n            : `\n  response_dict = client.execute_sync(\n    _gql_${this._get_node_name(node)},\n    variable_values=variables_no_none,\n  )`}\n\n  response_dict = remove_empty(response_dict)\n  return from_dict(data_class=${resposeClass}, data=response_dict, config=Config(cast=[Enum], check_types=False))\n`;\n        // {\"researchBox\": GetDatapointResponse.researchBox}\n        return [content].filter(a => a).join('\\n');\n    }\n    getExecuteFunctionSubscriptions(node) {\n        var _a;\n        if (!node.name || !node.name.value) {\n            return null;\n        }\n        this._collectedOperations.push(node);\n        const documentVariableName = this.convertName(node, {\n            suffix: this.config.documentVariableSuffix,\n            prefix: this.config.documentVariablePrefix,\n            useTypesPrefix: false,\n        });\n        const operationType = node.operation;\n        const operationTypeSuffix = this.config.dedupeOperationSuffix && node.name.value.toLowerCase().endsWith(node.operation)\n            ? ''\n            : !operationType\n                ? ''\n                : operationType;\n        const operationResultType = this.convertName(node, {\n            suffix: operationTypeSuffix + this._parsedConfig.operationResultSuffix,\n        });\n        const operationVariablesTypes = this.convertName(node, {\n            suffix: operationTypeSuffix + 'Variables',\n        });\n        this._operationsToInclude.push({\n            node,\n            documentVariableName,\n            operationType,\n            operationResultType,\n            operationVariablesTypes,\n        });\n        const inputs = (_a = node.variableDefinitions) === null || _a === void 0 ? void 0 : _a.map(v => this._gqlInputSignature(v));\n        const hasInputArgs = !!(inputs === null || inputs === void 0 ? void 0 : inputs.length);\n        const inputSignatures = hasInputArgs ? inputs.map(sig => sig.signature).join(', ') : '';\n        const variables = `{\n    ${inputs.map(v => `\"${v.name}\": ${v.value},`).join('\\n      ')}\n  }`;\n        const resposeClass = `${this.convertName(node.name.value).replace(/_/g, '')}Response`;\n        const content = `\nasync def execute_async_${this._get_node_name(node)}(${inputSignatures}) -> AsyncGenerator[${resposeClass}, None]:\n  async with _get_client_subscriptions() as client:\n    variables = ${variables}\n    variables_no_none = {k:v for k,v in variables.items() if v is not None}\n    generator = client.subscribe(\n      _gql_${this._get_node_name(node)},\n      variable_values=variables_no_none,\n    )\n    async for response_dict in generator:\n        yield from_dict(data_class=${resposeClass}, data=response_dict, config=Config(cast=[Enum], check_types=False))\n`;\n        return [content].filter(a => a).join('\\n');\n    }\n    _get_node_name(node) {\n        return `${this.convertName(node)}_${this._operationSuffix(node.operation)}`.toLowerCase();\n    }\n    getGQLVar(node) {\n        return `\n_gql_${this._get_node_name(node)} = gql(\"\"\"\n${this._gql(node)}\n\"\"\")\n`;\n    }\n    resolveFieldType(typeNode, hasDefaultValue = false) {\n        const innerType = getBaseTypeNode(typeNode);\n        const schemaType = this._schema.getType(innerType.name.value);\n        const listType = getListTypeField(typeNode);\n        const required = getListInnerTypeNode(typeNode).kind === Kind.NON_NULL_TYPE;\n        let result = null;\n        if (isScalarType(schemaType)) {\n            if (this.scalars[schemaType.name]) {\n                const baseType = this.scalars[schemaType.name];\n                result = new PythonFieldType({\n                    baseType: {\n                        type: baseType,\n                        required,\n                        valueType: isValueType(baseType),\n                    },\n                    listType,\n                });\n            }\n            else {\n                result = new PythonFieldType({\n                    baseType: {\n                        type: 'object',\n                        required,\n                        valueType: false,\n                    },\n                    listType,\n                });\n            }\n        }\n        else if (isInputObjectType(schemaType)) {\n            result = new PythonFieldType({\n                baseType: {\n                    type: `${this._nonScalarPrefix()}${this.convertName(schemaType.name)}`,\n                    required,\n                    valueType: false,\n                },\n                listType,\n            });\n        }\n        else if (isEnumType(schemaType)) {\n            result = new PythonFieldType({\n                baseType: {\n                    type: `${this._nonScalarPrefix()}${this.convertName(schemaType.name)}`,\n                    required,\n                    valueType: true,\n                },\n                listType,\n            });\n        }\n        else {\n            result = new PythonFieldType({\n                baseType: {\n                    type: `${schemaType.name}`,\n                    required,\n                    valueType: false,\n                },\n                listType,\n            });\n        }\n        if (hasDefaultValue) {\n            // Required field is optional when default value specified, see #4273\n            (result.listType || result.baseType).required = false;\n        }\n        return result;\n    }\n    _getResponseFieldRecursive(node, parentSchema, fieldAsFragment, prepend, addField) {\n        switch (node.kind) {\n            case Kind.OPERATION_DEFINITION: {\n                return new PythonDeclarationBlock({})\n                    .export()\n                    .asKind('class')\n                    .withDecorator('@dataclass')\n                    .withName(`${this.convertName(prepend).replace(/_/g, '')}Response`)\n                    .withBlock(node.selectionSet.selections\n                    .map(opr => {\n                    if (opr.kind !== Kind.FIELD) {\n                        throw new Error(`Unknown kind; ${opr.kind} in OperationDefinitionNode`);\n                    }\n                    return this._getResponseFieldRecursive(opr, parentSchema, false);\n                })\n                    .join('\\n')).string;\n            }\n            case Kind.FIELD: {\n                const fieldSchema = parentSchema.fields.find(f => f.name.value === node.name.value);\n                if (!fieldSchema) {\n                    throw new Error(`Field schema not found; ${node.name.value}`);\n                }\n                const responseType = this.resolveFieldType(fieldSchema.type);\n                if (!node.selectionSet) {\n                    const responseTypeName = wrapFieldType(responseType, responseType.listType, 'List');\n                    if (!fieldAsFragment) {\n                        return indentMultiline([`${node.name.value}: \"${responseTypeName}\"`].join('\\n') + '\\n');\n                    }\n                    else {\n                        return ''; // `${node.name.value}: \"${responseTypeName}\"` + '\\n';\n                    }\n                }\n                else {\n                    const selectionBaseTypeName = `${responseType.baseType.type}Selection`;\n                    const selectionType = Object.assign(new PythonFieldType(responseType), {\n                        baseType: { type: selectionBaseTypeName },\n                    });\n                    const selectionTypeName = wrapFieldType(selectionType, selectionType.listType, 'List');\n                    const innerClassSchema = this._schemaAST.definitions.find(d => {\n                        return ((d.kind === Kind.OBJECT_TYPE_DEFINITION || d.kind === Kind.INTERFACE_TYPE_DEFINITION) &&\n                            d.name.value === responseType.baseType.type);\n                    });\n                    if (!innerClassSchema) {\n                        throw new Error(`innerClassSchema not found: ${node.name.value}, schema: ${innerClassSchema}, opr.kind: ${node.kind}`);\n                    }\n                    const fragmentTypes = [Kind.FRAGMENT_SPREAD, Kind.INLINE_FRAGMENT];\n                    const isSomeChildFragments = node.selectionSet.selections.some(s => fragmentTypes.indexOf(s.kind) !== -1);\n                    const nonFragmentChilds = node.selectionSet.selections.flatMap(s => (s.kind !== Kind.FIELD ? [] : s));\n                    if (isSomeChildFragments) {\n                        const ret = indentMultiline([\n                            //  innerClassDefinition,\n                            ...node.selectionSet.selections.map(s => {\n                                return this._getResponseFieldRecursive(s, innerClassSchema, true, undefined, nonFragmentChilds);\n                            }),\n                            `${node.name.value}: List[Union[${node.selectionSet.selections\n                                .flatMap(s => (s.kind === Kind.FIELD ? [] : s))\n                                .map(s => {\n                                var _a;\n                                if (s.kind === Kind.INLINE_FRAGMENT) {\n                                    return (_a = s.typeCondition) === null || _a === void 0 ? void 0 : _a.name.value;\n                                }\n                                else if (s.kind === Kind.FRAGMENT_SPREAD) {\n                                    return s.name.value;\n                                }\n                                //return s.name.value;\n                                throw Error('Unknown Type');\n                            })\n                                .join(', ')}]]`,\n                        ].join('\\n'));\n                        return ret;\n                    }\n                    else {\n                        if (!fieldAsFragment) {\n                            const innerClassDefinition = new PythonDeclarationBlock({})\n                                .asKind('class')\n                                .withDecorator('@dataclass')\n                                .withName(selectionBaseTypeName)\n                                .withBlock(node.selectionSet.selections\n                                .map(s => {\n                                return this._getResponseFieldRecursive(s, innerClassSchema, false);\n                            })\n                                .join('\\n')).string;\n                            return indentMultiline([innerClassDefinition, `${node.name.value}: ${selectionTypeName}`].join('\\n'));\n                        }\n                        return '';\n                    }\n                }\n            }\n            case Kind.FRAGMENT_SPREAD: {\n                const fragmentSchema = this._fragments.find(f => f.name === node.name.value);\n                if (!fragmentSchema) {\n                    throw new Error(`Fragment schema not found: ${node.name.value}`);\n                }\n                const fragmentParentSchema = this._schemaAST.definitions.find(s => s.kind === Kind.OBJECT_TYPE_DEFINITION && s.name.value === fragmentSchema.node.typeCondition.name.value);\n                if (!fragmentParentSchema) {\n                    throw new Error(`Fragment schema not found: ${fragmentSchema.node.typeCondition.name.value}`);\n                }\n                const innerClassDefinition = new PythonDeclarationBlock({})\n                    .asKind('class')\n                    .withDecorator('@dataclass')\n                    .withName(node.name.value)\n                    .withBlock(fragmentSchema.node.selectionSet.selections\n                    .map(s => {\n                    return this._getResponseFieldRecursive(s, fragmentParentSchema, false);\n                })\n                    .join('\\n')).string;\n                return innerClassDefinition;\n            }\n            case Kind.INLINE_FRAGMENT: {\n                const fragmentSchemaName = node.typeCondition.name.value;\n                const fragmentSchema = this._schemaAST.definitions.find(s => s.kind === Kind.OBJECT_TYPE_DEFINITION && s.name.value === fragmentSchemaName);\n                if (!fragmentSchema) {\n                    throw new Error(`Fragment schema not found; ${fragmentSchemaName}`);\n                }\n                let block = '\\n' +\n                    node.selectionSet.selections\n                        .map(s => {\n                        return this._getResponseFieldRecursive(s, fragmentSchema, false);\n                    })\n                        .join('\\n');\n                if (addField) {\n                    block =\n                        block +\n                            '\\n' +\n                            addField\n                                .flatMap(s => {\n                                return s.kind === Kind.FIELD &&\n                                    node.selectionSet.selections\n                                        .filter(s => s.kind === Kind.FIELD)\n                                        .map((s) => s.name.value)\n                                        .includes(s.name.value)\n                                    ? []\n                                    : this._getResponseFieldRecursive(s, fragmentSchema, false);\n                            })\n                                .join('\\n');\n                }\n                const innerClassDefinition = new PythonDeclarationBlock({})\n                    .asKind('class')\n                    .withDecorator('@dataclass')\n                    .withName(fragmentSchemaName)\n                    .withBlock(block).string;\n                if (addField) {\n                    return innerClassDefinition + '\\n';\n                }\n                return innerClassDefinition + '\\n';\n            }\n        }\n    }\n    getResponseClass(node) {\n        var _a, _b;\n        const operationSchema = this._schemaAST.definitions.find(s => s.kind === Kind.OBJECT_TYPE_DEFINITION && s.name.value.toLowerCase() === node.operation);\n        return this._getResponseFieldRecursive(node, operationSchema, false, (_b = (_a = node.name) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : '');\n    }\n    OperationDefinition(node) {\n        return [this.getGQLVar(node), this.getResponseClass(node)]\n            .concat(node.operation === 'subscription'\n            ? [this.getExecuteFunctionSubscriptions(node)]\n            : [this.getExecuteFunction(false, node), this.getExecuteFunction(true, node)])\n            .join('\\n\\n');\n    }\n}\n//# sourceMappingURL=visitor.js.map","import { visit, concatAST, Kind } from 'graphql';\nimport { PythonOperationsVisitor } from './visitor';\nimport { extname } from 'path';\nimport gql from 'graphql-tag';\nconst getImports = () => {\n    return `\nfrom typing import List, Optional, Union, AsyncGenerator, Type\nfrom dataclasses import dataclass\nfrom dataclasses import asdict\nfrom gql import Client, gql\nfrom gql.transport.websockets import WebsocketsTransport\nfrom gql.transport.aiohttp import AIOHTTPTransport\nfrom gql.transport.requests import RequestsHTTPTransport\nfrom dacite import from_dict, Config\nfrom enum import Enum\n\ndef remove_empty(dict_or_list):\n    if isinstance(dict_or_list, dict):\n        for key, value in dict_or_list.items():\n            dict_or_list[key] = remove_empty(value)\n        return dict_or_list\n    elif isinstance(dict_or_list, list):\n        for count, object_in_list in enumerate(dict_or_list):\n            if object_in_list == {} or object_in_list == [] or object_in_list == None:\n                del dict_or_list[count]\n        return dict_or_list\n    else:\n        return dict_or_list\n\n`;\n};\nconst getClientFunction = (config, type) => {\n    const transportClass = type === 'sync' ? 'RequestsHTTPTransport' : type === 'async' ? 'AIOHTTPTransport' : 'WebsocketsTransport';\n    return `\ndef _get_client_${type}() -> Client:\n  transport = ${transportClass}(url=${type === 'subscriptions' ? config.schemaSubscriptions : config.schema}, headers={${config.headerName !== undefined && config.headerName !== '' ? `${config.headerName}: ${config.headerValue}` : ``}})\n  client = Client(transport=transport, fetch_schema_from_transport=False)\n  return client\n`;\n};\nexport const plugin = (schema, documents, config) => {\n    const allAst = concatAST(documents.map(v => v.document));\n    const allFragments = [\n        ...allAst.definitions.filter(d => d.kind === Kind.FRAGMENT_DEFINITION).map(fragmentDef => ({\n            node: fragmentDef,\n            name: fragmentDef.name.value,\n            onType: fragmentDef.typeCondition.name.value,\n            isExternal: false,\n        })),\n        ...(config.externalFragments || []),\n    ];\n    const visitor = new PythonOperationsVisitor(schema, allFragments, config, documents);\n    const visitorResult = visit(allAst, { leave: visitor });\n    return {\n        prepend: [],\n        content: [\n            getImports(),\n            getClientFunction(config, 'sync'),\n            getClientFunction(config, 'async'),\n            getClientFunction(config, 'subscriptions'),\n            ...visitorResult.definitions.filter(t => typeof t === 'string'),\n        ]\n            .filter(a => a)\n            .join('\\n'),\n    };\n};\nexport const addToSchema = gql `\n  directive @namedClient(name: String!) on OBJECT | FIELD\n`;\nexport const validate = async (schema, documents, config, outputFile) => {\n    if (extname(outputFile) !== '.py') {\n        throw new Error(`Plugin \"python-operations\" requires extension to be \".py\"!`);\n    }\n};\nexport { PythonOperationsVisitor };\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":";;;;;;AACO,SAAS,sBAAsB,CAAC,OAAO,EAAE,WAAW,GAAG,CAAC,EAAE;AACjE,IAAI,IAAI,CAAC,OAAO,IAAI,OAAO,KAAK,EAAE,EAAE;AACpC,QAAQ,OAAO,EAAE,CAAC;AAClB,KAAK;AACL,IAAI,IAAI,iBAAiB,CAAC,OAAO,CAAC,EAAE;AACpC,QAAQ,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;AAChC,KAAK;AACL,IAAI,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC/C,IAAI,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACpC,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AAC5B,QAAQ,OAAO,MAAM,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;AACtD,KAAK;AACL,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AACvC,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnE,CAAC;AACM,MAAM,sBAAsB,SAAS,gBAAgB,CAAC;AAC7D,IAAI,WAAW,CAAC,OAAO,EAAE;AACzB,QAAQ,KAAK,CAAC;AACd,YAAY,sBAAsB,EAAE,GAAG;AACvC,YAAY,GAAG,OAAO;AACtB,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,WAAW,CAAC,OAAO,EAAE;AACzB,QAAQ,MAAM,eAAe,GAAG,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC;AACzF,QAAQ,IAAI,eAAe,EAAE;AAC7B,YAAY,IAAI,CAAC,QAAQ,GAAG,sBAAsB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/D,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,IAAI,MAAM,GAAG;AACjB,QAAQ,IAAI,MAAM,GAAG,EAAE,CAAC;AACxB,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;AAC7B,YAAY,MAAM,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AAC7C,SAAS;AACT,QAAQ,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO,EAAE;AAClD,YAAY,MAAM,IAAI,QAAQ,CAAC;AAC/B,SAAS;AACT,QAAQ,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,IAAI,EAAE,CAAC,CAAC;AAC7D,QAAQ,IAAI,IAAI,EAAE;AAClB,YAAY,MAAM,IAAI,IAAI,CAAC;AAC3B,SAAS;AACT,QAAQ,QAAQ,IAAI,CAAC,KAAK;AAC1B,YAAY,KAAK,MAAM;AACvB,gBAAgB,MAAM,IAAI,QAAQ,CAAC;AACnC,gBAAgB,MAAM;AACtB,YAAY,KAAK,OAAO;AACxB,gBAAgB,MAAM,IAAI,WAAW,CAAC;AACtC,gBAAgB,MAAM;AAGtB,SAAS;AACT,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE;AACzB,YAAY,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC/B,gBAAgB,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC;AACxC,aAAa;AACb,YAAY,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;AAC3F,YAAY,MAAM,MAAM,GAAG,GAAG,GAAG,YAAY,CAAC;AAC9C,YAAY,IAAI,KAAK,GAAG,YAAY,CAAC;AACrC,YAAY,IAAI,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE;AACzC,gBAAgB,KAAK,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AAC/D,aAAa;AACb,YAAY,MAAM,KAAK,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACvF,YAAY,IAAI,IAAI,CAAC,WAAW,EAAE;AAClC,gBAAgB,MAAM,IAAI,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACzF,aAAa;AACb,iBAAiB;AACjB,gBAAgB,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AAC/D,aAAa;AACb,SAAS;AACT,aAAa,IAAI,IAAI,CAAC,QAAQ,EAAE;AAChC,YAAY,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC;AACpC,YAAY,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO,EAAE;AACtD,gBAAgB,MAAM,IAAI,GAAG,CAAC;AAC9B,aAAa;AACb,YAAY,MAAM,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AAC5D,SAAS;AACT,QAAQ,OAAO,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,EAAE,IAAI,MAAM,GAAG,IAAI,CAAC;AACpE,KAAK;AACL;;AC/EO,MAAM,cAAc,GAAG;AAC9B,IAAI,EAAE,EAAE,KAAK;AACb,IAAI,MAAM,EAAE,KAAK;AACjB,IAAI,OAAO,EAAE,MAAM;AACnB,IAAI,GAAG,EAAE,KAAK;AACd,IAAI,KAAK,EAAE,OAAO;AAClB,CAAC,CAAC;AACK,MAAM,sBAAsB,GAAG;AACtC,IAAI,MAAM;AACV,IAAI,MAAM;AACV,IAAI,OAAO;AACX,IAAI,MAAM;AACV,IAAI,SAAS;AACb,IAAI,QAAQ;AACZ,IAAI,OAAO;AACX,IAAI,KAAK;AACT,IAAI,MAAM;AACV,IAAI,MAAM;AACV,IAAI,OAAO;AACX,IAAI,OAAO;AACX,IAAI,QAAQ;AACZ,CAAC;;ACMM,SAAS,WAAW,CAAC,IAAI,EAAE;AAClC;AACA;AACA,IAAI,OAAO,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACjD,CAAC;AACM,SAAS,gBAAgB,CAAC,QAAQ,EAAE;AAC3C,IAAI,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,EAAE;AAC1C,QAAQ,OAAO;AACf,YAAY,QAAQ,EAAE,KAAK;AAC3B,YAAY,IAAI,EAAE,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC;AACjD,SAAS,CAAC;AACV,KAAK;AACL,SAAS,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,EAAE;AAC5F,QAAQ,OAAO,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AAC9D,YAAY,QAAQ,EAAE,IAAI;AAC1B,SAAS,CAAC,CAAC;AACX,KAAK;AACL,SAAS,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,EAAE;AACnD,QAAQ,OAAO,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC/C,KAAK;AACL,SAAS;AACT,QAAQ,OAAO,SAAS,CAAC;AACzB,KAAK;AACL,CAAC;AACM,SAAS,gBAAgB,CAAC,QAAQ,EAAE;AAC3C,IAAI,IAAI,QAAQ,EAAE;AAClB,QAAQ,OAAO,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACnD,KAAK;AACL,SAAS;AACT,QAAQ,OAAO,CAAC,CAAC;AACjB,KAAK;AACL,CAAC;AACM,SAAS,oBAAoB,CAAC,QAAQ,EAAE;AAC/C,IAAI,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,EAAE;AAC1C,QAAQ,OAAO,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACnD,KAAK;AACL,SAAS,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,EAAE;AAC5F,QAAQ,OAAO,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACnD,KAAK;AACL,SAAS;AACT,QAAQ,OAAO,QAAQ,CAAC;AACxB,KAAK;AACL,CAAC;AACM,SAAS,aAAa,CAAC,SAAS,EAAE,aAAa,EAAE,QAAQ,GAAG,aAAa,EAAE;AAClF,IAAI,IAAI,aAAa,EAAE;AACvB,QAAQ,MAAM,SAAS,GAAG,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACjF,QAAQ,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;AAC3C,KAAK;AACL,SAAS;AACT,QAAQ,OAAO,SAAS,CAAC,aAAa,CAAC;AACvC,KAAK;AACL;;AC9EO,MAAM,eAAe,CAAC;AAC7B,IAAI,WAAW,CAAC,SAAS,EAAE;AAC3B,QAAQ,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACvC,KAAK;AACL,IAAI,IAAI,aAAa,GAAG;AACxB,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC5E,QAAQ,OAAO,CAAC,EAAE,QAAQ,GAAG,WAAW,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;AAC3F,KAAK;AACL,IAAI,IAAI,mBAAmB,GAAG;AAC9B,QAAQ,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC/E,KAAK;AACL;;ACNA,MAAM,aAAa,GAAG,KAAK,CAAC;AACrB,MAAM,uBAAuB,SAAS,qBAAqB,CAAC;AACnE,IAAI,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE;AACzD,QAAQ,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE;AAC5C,YAAY,MAAM,EAAE,SAAS,CAAC,MAAM;AACpC,YAAY,mBAAmB,EAAE,SAAS,CAAC,mBAAmB;AAC9D,YAAY,WAAW,EAAE,SAAS,CAAC,WAAW,IAAI,aAAa;AAC/D,YAAY,cAAc,EAAE,SAAS,CAAC,cAAc,IAAI,aAAa;AACrE,YAAY,kBAAkB,EAAE,SAAS,CAAC,kBAAkB,IAAI,aAAa;AAC7E,YAAY,OAAO,EAAE,YAAY,CAAC,MAAM,EAAE,SAAS,CAAC,OAAO,EAAE,cAAc,CAAC;AAC5E,SAAS,EAAE,SAAS,CAAC,CAAC;AACtB,QAAQ,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;AACvC,QAAQ,IAAI,CAAC,sBAAsB,EAAE,CAAC;AACtC,QAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvB,QAAQ,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;AACrD,QAAQ,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;AAC7C,KAAK;AACL;AACA,IAAI,sBAAsB,GAAG;AAC7B,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,KAAK,YAAY,CAAC,UAAU,EAAE;AAClE;AACA,YAAY,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC,YAAY,CAAC;AACjE,SAAS;AACT,KAAK;AACL,IAAI,IAAI,CAAC,IAAI,EAAE;AACf,QAAQ,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;AACzD,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACvG,QAAQ,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACxC,KAAK;AACL,IAAI,gBAAgB,GAAG;AACvB,QAAQ,OAAO,IAAI,CAAC,wBAAwB,GAAG,QAAQ,GAAG,EAAE,CAAC;AAC7D,KAAK;AACL,IAAI,kBAAkB,CAAC,QAAQ,EAAE;AACjC,QAAQ,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC;AACvC,QAAQ,MAAM,SAAS,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;AACpD,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACtE,QAAQ,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;AAClD,QAAQ,MAAM,cAAc,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;AACxD,QAAQ,MAAM,QAAQ,GAAG,CAAC,cAAc;AACxC,cAAc,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACjE,cAAc,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC;AACxD,QAAQ,MAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AACpD,QAAQ,MAAM,QAAQ,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,CAAC;AACpF,QAAQ,OAAO;AACf,YAAY,IAAI,EAAE,IAAI;AACtB,YAAY,SAAS,EAAE,CAAC,QAAQ;AAChC,kBAAkB,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,GAAG,SAAS,GAAG,EAAE,CAAC,CAAC;AACrE,kBAAkB,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC9H,YAAY,KAAK,EAAE,cAAc,GAAG,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;AAC5D,SAAS,CAAC;AACV,KAAK;AACL,IAAI,gBAAgB,CAAC,aAAa,EAAE;AACpC,QAAQ,QAAQ,aAAa;AAC7B,YAAY,KAAK,OAAO;AACxB,gBAAgB,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;AAC/C,YAAY,KAAK,UAAU;AAC3B,gBAAgB,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;AAClD,YAAY,KAAK,cAAc;AAC/B,gBAAgB,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC;AACtD,YAAY;AACZ,gBAAgB,OAAO,aAAa,CAAC;AACrC,SAAS;AACT,KAAK;AACL,IAAI,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE;AACtC,QAAQ,IAAI,EAAE,CAAC;AACf,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AAC5C,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS;AACT,QAAQ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7C,QAAQ,MAAM,oBAAoB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;AAC5D,YAAY,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,sBAAsB;AACtD,YAAY,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,sBAAsB;AACtD,YAAY,cAAc,EAAE,KAAK;AACjC,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;AAC7C,QAAQ,MAAM,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;AAC/H,cAAc,EAAE;AAChB,cAAc,CAAC,aAAa;AAC5B,kBAAkB,EAAE;AACpB,kBAAkB,aAAa,CAAC;AAChC,QAAQ,MAAM,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;AAC3D,YAAY,MAAM,EAAE,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB;AAClF,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,uBAAuB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;AAC/D,YAAY,MAAM,EAAE,mBAAmB,GAAG,WAAW;AACrD,SAAS,CAAC,CAAC;AACX,QAAQ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC;AACvC,YAAY,IAAI;AAChB,YAAY,oBAAoB;AAChC,YAAY,aAAa;AACzB,YAAY,mBAAmB;AAC/B,YAAY,uBAAuB;AACnC,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,MAAM,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,mBAAmB,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;AACpI,QAAQ,MAAM,YAAY,GAAG,CAAC,EAAE,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AAC/F,QAAQ,MAAM,eAAe,GAAG,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;AAChG,QAAQ,MAAM,SAAS,GAAG,CAAC;AAC3B,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACnE,GAAG,CAAC,CAAC;AACL,QAAQ,MAAM,YAAY,GAAG,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;AAC9F,QAAQ,MAAM,OAAO,GAAG,CAAC;AACzB,EAAE,OAAO,GAAG,QAAQ,GAAG,EAAE,CAAC,WAAW,EAAE,OAAO,GAAG,QAAQ,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,KAAK,EAAE,YAAY,CAAC;AACnI,uBAAuB,EAAE,OAAO,GAAG,OAAO,GAAG,MAAM,CAAC;AACpD,YAAY,EAAE,SAAS,CAAC;AACxB;AACA,EAAE,OAAO;AACT,cAAc,CAAC;AACf;AACA,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACrC;AACA;AACA,6CAA6C,CAAC;AAC9C,cAAc,CAAC;AACf;AACA,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACrC;AACA,GAAG,CAAC,CAAC;AACL;AACA;AACA,8BAA8B,EAAE,YAAY,CAAC;AAC7C,CAAC,CAAC;AACF;AACA,QAAQ,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnD,KAAK;AACL,IAAI,+BAA+B,CAAC,IAAI,EAAE;AAC1C,QAAQ,IAAI,EAAE,CAAC;AACf,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AAC5C,YAAY,OAAO,IAAI,CAAC;AACxB,SAAS;AACT,QAAQ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7C,QAAQ,MAAM,oBAAoB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;AAC5D,YAAY,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,sBAAsB;AACtD,YAAY,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,sBAAsB;AACtD,YAAY,cAAc,EAAE,KAAK;AACjC,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;AAC7C,QAAQ,MAAM,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;AAC/H,cAAc,EAAE;AAChB,cAAc,CAAC,aAAa;AAC5B,kBAAkB,EAAE;AACpB,kBAAkB,aAAa,CAAC;AAChC,QAAQ,MAAM,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;AAC3D,YAAY,MAAM,EAAE,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB;AAClF,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,uBAAuB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;AAC/D,YAAY,MAAM,EAAE,mBAAmB,GAAG,WAAW;AACrD,SAAS,CAAC,CAAC;AACX,QAAQ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC;AACvC,YAAY,IAAI;AAChB,YAAY,oBAAoB;AAChC,YAAY,aAAa;AACzB,YAAY,mBAAmB;AAC/B,YAAY,uBAAuB;AACnC,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,MAAM,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,mBAAmB,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;AACpI,QAAQ,MAAM,YAAY,GAAG,CAAC,EAAE,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AAC/F,QAAQ,MAAM,eAAe,GAAG,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;AAChG,QAAQ,MAAM,SAAS,GAAG,CAAC;AAC3B,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACnE,GAAG,CAAC,CAAC;AACL,QAAQ,MAAM,YAAY,GAAG,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;AAC9F,QAAQ,MAAM,OAAO,GAAG,CAAC;AACzB,wBAAwB,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,oBAAoB,EAAE,YAAY,CAAC;AAC1G;AACA,gBAAgB,EAAE,SAAS,CAAC;AAC5B;AACA;AACA,WAAW,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACvC;AACA;AACA;AACA,mCAAmC,EAAE,YAAY,CAAC;AAClD,CAAC,CAAC;AACF,QAAQ,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnD,KAAK;AACL,IAAI,cAAc,CAAC,IAAI,EAAE;AACzB,QAAQ,OAAO,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;AAClG,KAAK;AACL,IAAI,SAAS,CAAC,IAAI,EAAE;AACpB,QAAQ,OAAO,CAAC;AAChB,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACjC,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClB;AACA,CAAC,CAAC;AACF,KAAK;AACL,IAAI,gBAAgB,CAAC,QAAQ,EAAE,eAAe,GAAG,KAAK,EAAE;AACxD,QAAQ,MAAM,SAAS,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;AACpD,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACtE,QAAQ,MAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AACpD,QAAQ,MAAM,QAAQ,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,CAAC;AACpF,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC;AAC1B,QAAQ,IAAI,YAAY,CAAC,UAAU,CAAC,EAAE;AACtC,YAAY,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;AAC/C,gBAAgB,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC/D,gBAAgB,MAAM,GAAG,IAAI,eAAe,CAAC;AAC7C,oBAAoB,QAAQ,EAAE;AAC9B,wBAAwB,IAAI,EAAE,QAAQ;AACtC,wBAAwB,QAAQ;AAChC,wBAAwB,SAAS,EAAE,WAAW,CAAC,QAAQ,CAAC;AACxD,qBAAqB;AACrB,oBAAoB,QAAQ;AAC5B,iBAAiB,CAAC,CAAC;AACnB,aAAa;AACb,iBAAiB;AACjB,gBAAgB,MAAM,GAAG,IAAI,eAAe,CAAC;AAC7C,oBAAoB,QAAQ,EAAE;AAC9B,wBAAwB,IAAI,EAAE,QAAQ;AACtC,wBAAwB,QAAQ;AAChC,wBAAwB,SAAS,EAAE,KAAK;AACxC,qBAAqB;AACrB,oBAAoB,QAAQ;AAC5B,iBAAiB,CAAC,CAAC;AACnB,aAAa;AACb,SAAS;AACT,aAAa,IAAI,iBAAiB,CAAC,UAAU,CAAC,EAAE;AAChD,YAAY,MAAM,GAAG,IAAI,eAAe,CAAC;AACzC,gBAAgB,QAAQ,EAAE;AAC1B,oBAAoB,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAC1F,oBAAoB,QAAQ;AAC5B,oBAAoB,SAAS,EAAE,KAAK;AACpC,iBAAiB;AACjB,gBAAgB,QAAQ;AACxB,aAAa,CAAC,CAAC;AACf,SAAS;AACT,aAAa,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;AACzC,YAAY,MAAM,GAAG,IAAI,eAAe,CAAC;AACzC,gBAAgB,QAAQ,EAAE;AAC1B,oBAAoB,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAC1F,oBAAoB,QAAQ;AAC5B,oBAAoB,SAAS,EAAE,IAAI;AACnC,iBAAiB;AACjB,gBAAgB,QAAQ;AACxB,aAAa,CAAC,CAAC;AACf,SAAS;AACT,aAAa;AACb,YAAY,MAAM,GAAG,IAAI,eAAe,CAAC;AACzC,gBAAgB,QAAQ,EAAE;AAC1B,oBAAoB,IAAI,EAAE,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;AAC9C,oBAAoB,QAAQ;AAC5B,oBAAoB,SAAS,EAAE,KAAK;AACpC,iBAAiB;AACjB,gBAAgB,QAAQ;AACxB,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQ,IAAI,eAAe,EAAE;AAC7B;AACA,YAAY,CAAC,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,EAAE,QAAQ,GAAG,KAAK,CAAC;AAClE,SAAS;AACT,QAAQ,OAAO,MAAM,CAAC;AACtB,KAAK;AACL,IAAI,0BAA0B,CAAC,IAAI,EAAE,YAAY,EAAE,eAAe,EAAE,OAAO,EAAE,QAAQ,EAAE;AACvF,QAAQ,QAAQ,IAAI,CAAC,IAAI;AACzB,YAAY,KAAK,IAAI,CAAC,oBAAoB,EAAE;AAC5C,gBAAgB,OAAO,IAAI,sBAAsB,CAAC,EAAE,CAAC;AACrD,qBAAqB,MAAM,EAAE;AAC7B,qBAAqB,MAAM,CAAC,OAAO,CAAC;AACpC,qBAAqB,aAAa,CAAC,YAAY,CAAC;AAChD,qBAAqB,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;AACvF,qBAAqB,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU;AAC3D,qBAAqB,GAAG,CAAC,GAAG,IAAI;AAChC,oBAAoB,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,EAAE;AACjD,wBAAwB,MAAM,IAAI,KAAK,CAAC,CAAC,cAAc,EAAE,GAAG,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC;AAChG,qBAAqB;AACrB,oBAAoB,OAAO,IAAI,CAAC,0BAA0B,CAAC,GAAG,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;AACrF,iBAAiB,CAAC;AAClB,qBAAqB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;AACxC,aAAa;AACb,YAAY,KAAK,IAAI,CAAC,KAAK,EAAE;AAC7B,gBAAgB,MAAM,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACpG,gBAAgB,IAAI,CAAC,WAAW,EAAE;AAClC,oBAAoB,MAAM,IAAI,KAAK,CAAC,CAAC,wBAAwB,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAClF,iBAAiB;AACjB,gBAAgB,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAC7E,gBAAgB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;AACxC,oBAAoB,MAAM,gBAAgB,GAAG,aAAa,CAAC,YAAY,EAAE,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACxG,oBAAoB,IAAI,CAAC,eAAe,EAAE;AAC1C,wBAAwB,OAAO,eAAe,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAChH,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,OAAO,EAAE,CAAC;AAClC,qBAAqB;AACrB,iBAAiB;AACjB,qBAAqB;AACrB,oBAAoB,MAAM,qBAAqB,GAAG,CAAC,EAAE,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC3F,oBAAoB,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,eAAe,CAAC,YAAY,CAAC,EAAE;AAC3F,wBAAwB,QAAQ,EAAE,EAAE,IAAI,EAAE,qBAAqB,EAAE;AACjE,qBAAqB,CAAC,CAAC;AACvB,oBAAoB,MAAM,iBAAiB,GAAG,aAAa,CAAC,aAAa,EAAE,aAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAC3G,oBAAoB,MAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI;AACnF,wBAAwB,QAAQ,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,sBAAsB,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,yBAAyB;AACpH,4BAA4B,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE;AACzE,qBAAqB,CAAC,CAAC;AACvB,oBAAoB,IAAI,CAAC,gBAAgB,EAAE;AAC3C,wBAAwB,MAAM,IAAI,KAAK,CAAC,CAAC,4BAA4B,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/I,qBAAqB;AACrB,oBAAoB,MAAM,aAAa,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;AACvF,oBAAoB,MAAM,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC9H,oBAAoB,MAAM,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1H,oBAAoB,IAAI,oBAAoB,EAAE;AAC9C,wBAAwB,MAAM,GAAG,GAAG,eAAe,CAAC;AACpD;AACA,4BAA4B,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI;AACrE,gCAAgC,OAAO,IAAI,CAAC,0BAA0B,CAAC,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAAC;AAChI,6BAA6B,CAAC;AAC9B,4BAA4B,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU;AAC1F,iCAAiC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAC/E,iCAAiC,GAAG,CAAC,CAAC,IAAI;AAC1C,gCAAgC,IAAI,EAAE,CAAC;AACvC,gCAAgC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,eAAe,EAAE;AACrE,oCAAoC,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC,aAAa,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;AACrH,iCAAiC;AACjC,qCAAqC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,eAAe,EAAE;AAC1E,oCAAoC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;AACxD,iCAAiC;AACjC;AACA,gCAAgC,MAAM,KAAK,CAAC,cAAc,CAAC,CAAC;AAC5D,6BAA6B,CAAC;AAC9B,iCAAiC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;AAC/C,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACtC,wBAAwB,OAAO,GAAG,CAAC;AACnC,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,IAAI,CAAC,eAAe,EAAE;AAC9C,4BAA4B,MAAM,oBAAoB,GAAG,IAAI,sBAAsB,CAAC,EAAE,CAAC;AACvF,iCAAiC,MAAM,CAAC,OAAO,CAAC;AAChD,iCAAiC,aAAa,CAAC,YAAY,CAAC;AAC5D,iCAAiC,QAAQ,CAAC,qBAAqB,CAAC;AAChE,iCAAiC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU;AACvE,iCAAiC,GAAG,CAAC,CAAC,IAAI;AAC1C,gCAAgC,OAAO,IAAI,CAAC,0BAA0B,CAAC,CAAC,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;AACnG,6BAA6B,CAAC;AAC9B,iCAAiC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;AACpD,4BAA4B,OAAO,eAAe,CAAC,CAAC,oBAAoB,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAClI,yBAAyB;AACzB,wBAAwB,OAAO,EAAE,CAAC;AAClC,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,YAAY,KAAK,IAAI,CAAC,eAAe,EAAE;AACvC,gBAAgB,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7F,gBAAgB,IAAI,CAAC,cAAc,EAAE;AACrC,oBAAoB,MAAM,IAAI,KAAK,CAAC,CAAC,2BAA2B,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACrF,iBAAiB;AACjB,gBAAgB,MAAM,oBAAoB,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,sBAAsB,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC5L,gBAAgB,IAAI,CAAC,oBAAoB,EAAE;AAC3C,oBAAoB,MAAM,IAAI,KAAK,CAAC,CAAC,2BAA2B,EAAE,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAClH,iBAAiB;AACjB,gBAAgB,MAAM,oBAAoB,GAAG,IAAI,sBAAsB,CAAC,EAAE,CAAC;AAC3E,qBAAqB,MAAM,CAAC,OAAO,CAAC;AACpC,qBAAqB,aAAa,CAAC,YAAY,CAAC;AAChD,qBAAqB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AAC9C,qBAAqB,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU;AAC1E,qBAAqB,GAAG,CAAC,CAAC,IAAI;AAC9B,oBAAoB,OAAO,IAAI,CAAC,0BAA0B,CAAC,CAAC,EAAE,oBAAoB,EAAE,KAAK,CAAC,CAAC;AAC3F,iBAAiB,CAAC;AAClB,qBAAqB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;AACxC,gBAAgB,OAAO,oBAAoB,CAAC;AAC5C,aAAa;AACb,YAAY,KAAK,IAAI,CAAC,eAAe,EAAE;AACvC,gBAAgB,MAAM,kBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC;AACzE,gBAAgB,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,sBAAsB,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,kBAAkB,CAAC,CAAC;AAC5J,gBAAgB,IAAI,CAAC,cAAc,EAAE;AACrC,oBAAoB,MAAM,IAAI,KAAK,CAAC,CAAC,2BAA2B,EAAE,kBAAkB,CAAC,CAAC,CAAC,CAAC;AACxF,iBAAiB;AACjB,gBAAgB,IAAI,KAAK,GAAG,IAAI;AAChC,oBAAoB,IAAI,CAAC,YAAY,CAAC,UAAU;AAChD,yBAAyB,GAAG,CAAC,CAAC,IAAI;AAClC,wBAAwB,OAAO,IAAI,CAAC,0BAA0B,CAAC,CAAC,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;AACzF,qBAAqB,CAAC;AACtB,yBAAyB,IAAI,CAAC,IAAI,CAAC,CAAC;AACpC,gBAAgB,IAAI,QAAQ,EAAE;AAC9B,oBAAoB,KAAK;AACzB,wBAAwB,KAAK;AAC7B,4BAA4B,IAAI;AAChC,4BAA4B,QAAQ;AACpC,iCAAiC,OAAO,CAAC,CAAC,IAAI;AAC9C,gCAAgC,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK;AAC5D,oCAAoC,IAAI,CAAC,YAAY,CAAC,UAAU;AAChE,yCAAyC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC;AAC3E,yCAAyC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;AACjE,yCAAyC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;AAC/D,sCAAsC,EAAE;AACxC,sCAAsC,IAAI,CAAC,0BAA0B,CAAC,CAAC,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;AAChG,6BAA6B,CAAC;AAC9B,iCAAiC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5C,iBAAiB;AACjB,gBAAgB,MAAM,oBAAoB,GAAG,IAAI,sBAAsB,CAAC,EAAE,CAAC;AAC3E,qBAAqB,MAAM,CAAC,OAAO,CAAC;AACpC,qBAAqB,aAAa,CAAC,YAAY,CAAC;AAChD,qBAAqB,QAAQ,CAAC,kBAAkB,CAAC;AACjD,qBAAqB,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;AAC7C,gBAAgB,IAAI,QAAQ,EAAE;AAC9B,oBAAoB,OAAO,oBAAoB,GAAG,IAAI,CAAC;AACvD,iBAAiB;AACjB,gBAAgB,OAAO,oBAAoB,GAAG,IAAI,CAAC;AACnD,aAAa;AACb,SAAS;AACT,KAAK;AACL,IAAI,gBAAgB,CAAC,IAAI,EAAE;AAC3B,QAAQ,IAAI,EAAE,EAAE,EAAE,CAAC;AACnB,QAAQ,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,sBAAsB,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC;AAC/J,QAAQ,OAAO,IAAI,CAAC,0BAA0B,CAAC,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;AACxL,KAAK;AACL,IAAI,mBAAmB,CAAC,IAAI,EAAE;AAC9B,QAAQ,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAClE,aAAa,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,cAAc;AACrD,cAAc,CAAC,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,CAAC;AAC1D,cAAc,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1F,aAAa,IAAI,CAAC,MAAM,CAAC,CAAC;AAC1B,KAAK;AACL;;AC3ZA,MAAM,UAAU,GAAG,MAAM;AACzB,IAAI,OAAO,CAAC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AACF,CAAC,CAAC;AACF,MAAM,iBAAiB,GAAG,CAAC,MAAM,EAAE,IAAI,KAAK;AAC5C,IAAI,MAAM,cAAc,GAAG,IAAI,KAAK,MAAM,GAAG,uBAAuB,GAAG,IAAI,KAAK,OAAO,GAAG,kBAAkB,GAAG,qBAAqB,CAAC;AACrI,IAAI,OAAO,CAAC;AACZ,gBAAgB,EAAE,IAAI,CAAC;AACvB,cAAc,EAAE,cAAc,CAAC,KAAK,EAAE,IAAI,KAAK,eAAe,GAAG,MAAM,CAAC,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,UAAU,KAAK,SAAS,IAAI,MAAM,CAAC,UAAU,KAAK,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1O;AACA;AACA,CAAC,CAAC;AACF,CAAC,CAAC;AACU,MAAC,MAAM,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,KAAK;AACrD,IAAI,MAAM,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC7D,IAAI,MAAM,YAAY,GAAG;AACzB,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,WAAW,KAAK;AACnG,YAAY,IAAI,EAAE,WAAW;AAC7B,YAAY,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,KAAK;AACxC,YAAY,MAAM,EAAE,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK;AACxD,YAAY,UAAU,EAAE,KAAK;AAC7B,SAAS,CAAC,CAAC;AACX,QAAQ,IAAI,MAAM,CAAC,iBAAiB,IAAI,EAAE,CAAC;AAC3C,KAAK,CAAC;AACN,IAAI,MAAM,OAAO,GAAG,IAAI,uBAAuB,CAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AACzF,IAAI,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;AAC5D,IAAI,OAAO;AACX,QAAQ,OAAO,EAAE,EAAE;AACnB,QAAQ,OAAO,EAAE;AACjB,YAAY,UAAU,EAAE;AACxB,YAAY,iBAAiB,CAAC,MAAM,EAAE,MAAM,CAAC;AAC7C,YAAY,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC;AAC9C,YAAY,iBAAiB,CAAC,MAAM,EAAE,eAAe,CAAC;AACtD,YAAY,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,CAAC;AAC3E,SAAS;AACT,aAAa,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC;AAC3B,aAAa,IAAI,CAAC,IAAI,CAAC;AACvB,KAAK,CAAC;AACN,EAAE;AACU,MAAC,WAAW,GAAG,GAAG,CAAC,CAAC;AAChC;AACA,EAAE;AACU,MAAC,QAAQ,GAAG,OAAO,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,KAAK;AACzE,IAAI,IAAI,OAAO,CAAC,UAAU,CAAC,KAAK,KAAK,EAAE;AACvC,QAAQ,MAAM,IAAI,KAAK,CAAC,CAAC,0DAA0D,CAAC,CAAC,CAAC;AACtF,KAAK;AACL;;;;"}